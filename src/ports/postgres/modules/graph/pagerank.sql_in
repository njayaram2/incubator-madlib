/* ----------------------------------------------------------------------- *//**
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 *
 * @file graph.sql_in
 *
 * @brief SQL functions for graph analytics
 * @date Nov 2016
 *
 * @sa Provides various graph algorithms.
 *
 *//* ----------------------------------------------------------------------- */
m4_include(`SQLCommon.m4')


/**
@addtogroup grp_pagerank

<div class="toc"><b>Contents</b>
<ul>
<li><a href="#pagerank">PageRank</a></li>
<li><a href="#notes">Notes</a></li>
<li><a href="#examples">Examples</a></li>
<li><a href="#literature">Literature</a></li>
</ul>
</div>

@brief Find the PageRank of all vertices in a directed graph.

@anchor pagerank
@par PageRank
<pre class="syntax">
pagerank( vertex_table,
            vertex_id,
            edge_table,
            edge_args,
            out_table,
            damping_factor,
            max_iter,
            threshold
          )
</pre>

\b Arguments
<dl class="arglist">
<dt>vertex_table</dt>
<dd>TEXT. Name of the table containing the vertex data for the graph. Must contain the
column specified in the 'vertex_id' parameter below.</dd>

<dt>vertex_id</dt>
<dd>TEXT, Name of the column in 'vertex_table' containing
vertex ids.  The vertex ids are of type INTEGER with no duplicates.
They do not need to be contiguous.</dd>

<dt>edge_table</dt>
<dd>TEXT. Name of the table containing the edge data. The edge table must
contain columns for source vertex, destination vertex and edge weight.</dd>

<dt>edge_args</dt>
<dd>TEXT. A comma-delimited string containing multiple named arguments of
the form "name=value". The following parameters are supported for
this string argument:
  - src (INTEGER): Name of the column containing the source vertex ids in the edge table.
                   Default column name is 'src'.
  - dest (INTEGER): Name of the column containing the destination vertex ids in the edge table.
                    Default column name is 'dest'.</dd>

<dt>out_table</dt>
<dd>TEXT. Name of the table to store the result of PageRank.
It will contain a row for every vertex from 'vertex_table' with
the following columns:
  - vertex_id : The id of a vertex. Will use the input parameter 'vertex_id' for column naming.
  - pagerank : The vertex's PageRank.</dd>

<dt>damping_factor</dt>
<dd>FLOAT8, default 0.85. The probability, at any step, that a user will continue following the links,
in a random surfer model.</dd>

<dt>max_iter</dt>
<dd>INTEGER, default: 100. The maximum number of iterations allowed.</dd>

<dt>threshold</dt>
<dd>FLOAT8, default: 1e-5. If the difference between the PageRank of every vertex of two consecutive
iterations, is smaller than \e threshold, or the iteration number is larger than \e max_iter, the
computation stops.</dd>

</dl>

@anchor notes
@par Notes

The PageRank algorithm proposed by Larry Page and Sergey Brin is used [1]. The PageRank of all vertices
form a probability distribution over the vertices in the graph.

@anchor examples
@examp

-# Create vertex and edge tables to represent the graph:
<pre class="syntax">
DROP TABLE IF EXISTS vertex, edge;
CREATE TABLE vertex(
        id INTEGER
        );
CREATE TABLE edge(
        src INTEGER,
        dest INTEGER
        );
INSERT INTO vertex VALUES
(0),
(1),
(2),
(3),
(4),
(5),
(6);
INSERT INTO edge VALUES
(0, 1),
(0, 2),
(0, 4),
(1, 2),
(1, 3),
(2, 3),
(2, 5),
(2, 6),
(3, 0),
(4, 0),
(5, 6),
(6, 3);
</pre>

-# Compute the PageRank:
<pre class="syntax">
DROP TABLE IF EXISTS pagerank_out;
SELECT madlib.pagerank(
                         'vertex',             -- Vertex table
                         'id',                 -- Vertix id column
                         'edge',               -- Edge table
                         'src=src, dest=dest', -- Comma delimted string of edge arguments
                         'pagerank_out')       -- Output table of PageRank
SELECT * FROM pagerank_out ORDER BY pagerank desc;
</pre>
<pre class="result">
 id |      pagerank
----+--------------------
  0 |  0.278256122055856
  3 |  0.201882680839737
  2 |  0.142878491945534
  6 |  0.114538731993905
  1 |  0.100266150276761
  4 |  0.100266150276761
  5 |  0.061911672611445
(7 rows)
</pre>

@anchor literature
@par Literature

[1] PageRank algorithm. https://en.wikipedia.org/wiki/PageRank
*/

-------------------------------------------------------------------------
-- Functions for the UDA:
-------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.__compute_pagerank_transition(
    state double precision[],
    vertex INTEGER,
    inedges INTEGER[],
    outdegrees INTEGER[],
    previous_state double precision[],
    damping_factor double precision,
    nvertices INTEGER)
RETURNS double precision[]
AS 'MODULE_PATHNAME', 'compute_pagerank_transition'
LANGUAGE C
IMMUTABLE STRICT
m4_ifdef(`__HAS_FUNCTION_PROPERTIES__', `NO SQL', `');

CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.__compute_pagerank_merge_states(
    state1 double precision[],
    state2 double precision[])
RETURNS double precision[]
AS 'MODULE_PATHNAME', 'compute_pagerank_merge_states'
LANGUAGE C
IMMUTABLE STRICT
m4_ifdef(`__HAS_FUNCTION_PROPERTIES__', `NO SQL', `');

CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.__compute_pagerank_final(
    state double precision[])
RETURNS double precision[]
AS 'MODULE_PATHNAME', 'compute_pagerank_final'
LANGUAGE C
IMMUTABLE STRICT
m4_ifdef(`__HAS_FUNCTION_PROPERTIES__', `NO SQL', `');
-------------------------------------------------------------------------
-- User defined aggregate to compute PageRank:
-------------------------------------------------------------------------
DROP AGGREGATE IF EXISTS MADLIB_SCHEMA.__compute_pagerank(
    /* vertex */ INTEGER,
    /* inedges */ INTEGER[],
    /* outdegrees */ INTEGER[],
    /* previous_state */ double precision[],
    /* damping_factor */ double precision,
    /* nvertices */ INTEGER
);
CREATE AGGREGATE MADLIB_SCHEMA.__compute_pagerank(
    /* vertex */ INTEGER,
    /* inedges */ INTEGER[],
    /* outdegrees */ INTEGER[],
    /* previous_state */ double precision[],
    /* damping_factor */ double precision,
    /* nvertices */ INTEGER) (
    STYPE=double precision[],
    SFUNC=MADLIB_SCHEMA.__compute_pagerank_transition,
    m4_ifdef(`__POSTGRESQL__', `', `prefunc=MADLIB_SCHEMA.__compute_pagerank_merge_states,')
    FINALFUNC=MADLIB_SCHEMA.__compute_pagerank_final,
    INITCOND='{}'
);
-------------------------------------------------------------------------
-- UDF for convergence test
-------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.test_pagerank_convergence(
    /*+ state1 */ double precision[],
    /*+ state2 */ double precision[],
    /* threshold */ double precision)
RETURNS BOOLEAN AS 'MODULE_PATHNAME'
LANGUAGE c IMMUTABLE STRICT
m4_ifdef(`__HAS_FUNCTION_PROPERTIES__', `NO SQL', `');
-------------------------------------------------------------------------
-- UDF to create rel_args table
-------------------------------------------------------------------------
-- CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.internal_execute_using_pagerank_args(
--     sql VARCHAR
-- ) RETURNS VOID
-- IMMUTABLE
-- CALLED ON NULL INPUT
-- LANGUAGE c
-- AS 'MODULE_PATHNAME', 'exec_sql_using'
-- m4_ifdef(`__HAS_FUNCTION_PROPERTIES__', `NO SQL', `');
-------------------------------------------------------------------------

CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.pagerank(
    vertex_table    TEXT,
    vertex_id       TEXT,
    edge_table      TEXT,
    edge_args       TEXT,
    out_table       TEXT,
    damping_factor  FLOAT8,
    max_iter        INTEGER,
    threshold       FLOAT8
) RETURNS VOID AS $$
    PythonFunction(graph, pagerank, pagerank)
$$ LANGUAGE plpythonu VOLATILE
m4_ifdef(`\_\_HAS_FUNCTION_PROPERTIES\_\_', `MODIFIES SQL DATA', `');
-------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.pagerank(
    vertex_table    TEXT,
    vertex_id       TEXT,
    edge_table      TEXT,
    edge_args       TEXT,
    out_table       TEXT,
    damping_factor  FLOAT8,
    max_iter        INTEGER
) RETURNS VOID AS $$
    SELECT MADLIB_SCHEMA.pagerank($1, $2, $3, $4, $5, $6, $7, 0.00001)
$$ LANGUAGE SQL
m4_ifdef(`__HAS_FUNCTION_PROPERTIES__', `MODIFIES SQL DATA', `');
-------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.pagerank(
    vertex_table    TEXT,
    vertex_id       TEXT,
    edge_table      TEXT,
    edge_args       TEXT,
    out_table       TEXT,
    damping_factor  FLOAT8
) RETURNS VOID AS $$
    SELECT MADLIB_SCHEMA.pagerank($1, $2, $3, $4, $5, $6, 100, 0.00001)
$$ LANGUAGE SQL
m4_ifdef(`__HAS_FUNCTION_PROPERTIES__', `MODIFIES SQL DATA', `');
-------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.pagerank(
    vertex_table    TEXT,
    vertex_id       TEXT,
    edge_table      TEXT,
    edge_args       TEXT,
    out_table       TEXT
) RETURNS VOID AS $$
    SELECT MADLIB_SCHEMA.pagerank($1, $2, $3, $4, $5, 0.85, 100, 0.00001)
$$ LANGUAGE SQL
m4_ifdef(`__HAS_FUNCTION_PROPERTIES__', `MODIFIES SQL DATA', `');
-------------------------------------------------------------------------

-- Online help
CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.pagerank(
    message VARCHAR
) RETURNS VARCHAR AS $$
    PythonFunction(graph, pagerank, pagerank_help)
$$ LANGUAGE plpythonu IMMUTABLE
m4_ifdef(`\_\_HAS_FUNCTION_PROPERTIES\_\_', `CONTAINS SQL', `');

--------------------------------------------------------------------------------

CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.pagerank()
RETURNS VARCHAR AS $$
    SELECT MADLIB_SCHEMA.pagerank('');
$$ LANGUAGE sql IMMUTABLE
m4_ifdef(`\_\_HAS_FUNCTION_PROPERTIES\_\_', `CONTAINS SQL', `');
--------------------------------------------------------------------------------
