# coding=utf-8
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# PageRank

# Please refer to the pagerank.sql_in file for the documentation

"""
@file pagerank.py_in

@namespace graph
"""

import plpy
from utilities.control import MinWarning
from utilities.utilities import _assert
from utilities.utilities import extract_keyvalue_params
from utilities.utilities import unique_string
from utilities.control import IterationController2S
from graph_utils import *

import time

m4_changequote(`<!', `!>')

def validate_pagerank_args(vertex_table, vertex_id, edge_table, edge_args,
        out_table, damping_factor, max_iter, threshold, module_name):
    """
    Function to validate input parameters for PageRank
    """
    if vertex_id is None:
        vertex_id = "id"
    params_types = {'src': str, 'dest': str}
    default_args = {'src': 'src', 'dest': 'dest'}
    edge_params = extract_keyvalue_params(edge_args, params_types, default_args)
    validate_graph_coding(vertex_table, vertex_id, edge_table, edge_params,
        out_table, module_name)
    _assert(isinstance(damping_factor, float),
        """PageRank: Damping factor {0} has to be a float.""".format(damping_factor))
    _assert(isinstance(max_iter, int),
        """PageRank: Max_iter {0} has to be a int.""".format(max_iter))
    _assert(isinstance(threshold, float),
        """PageRank: Threshold {0} has to be a float.""".format(threshold))
    return [edge_params["src"], edge_params["dest"]]

def get_convergence_thresh(threshold):
    if 'e' in str(threshold):
            thresh = str(threshold)[-1]
    else:
        thresh = len(str(threshold).split('.')[1])
    return thresh

def pagerank_help(schema_madlib, message, **kwargs):
    """
    Help function for pagerank

    Args:
        @param schema_madlib
        @param message: string, Help message string
        @param kwargs

    Returns:
        String. Help/usage information
    """
    if message is not None and \
            message.lower() in ("usage", "help", "?"):
        help_string = "Get from method below"
        help_string = get_graph_usage(schema_madlib, 'PageRank',
            """out_table       TEXT, -- Name of the output table for PageRank
damping_factor, DOUBLE PRECISION, -- Damping factor in random surfer model (DEFAULT = 0.85)
max_iter,       INTEGER, -- Maximum iteration number (DEFAULT = 100)
threshold       DOUBLE PRECISION -- Stopping criteria (DEFAULT = 1e-5)
""")
    else:
        if message is not None and \
                message.lower() in ("example", "examples"):
            help_string = """
----------------------------------------------------------------------------
                                EXAMPLES
----------------------------------------------------------------------------
-- Create a graph, represented as vertex and edge tables.
DROP TABLE IF EXISTS vertex, edge;
CREATE TABLE vertex(
        id INTEGER
        );
CREATE TABLE edge(
        src INTEGER,
        dest INTEGER
        );
INSERT INTO vertex VALUES
(0),
(1),
(2),
(3),
(4),
(5),
(6);
INSERT INTO edge VALUES
(0, 1),
(0, 2),
(0, 4),
(1, 2),
(1, 3),
(2, 3),
(2, 5),
(2, 6),
(3, 0),
(4, 0),
(5, 6),
(6, 3);

-- Compute the PageRank:
DROP TABLE IF EXISTS pagerank_out;
SELECT madlib.pagerank(
             'vertex',             -- Vertex table
             'id',                 -- Vertix id column
             'edge',               -- Edge table
             'src=src, dest=dest', -- Comma delimted string of edge arguments
             'pagerank_out')       -- Output table of PageRank

-- View the PageRank of all vertices, sorted by their scores.
SELECT * FROM pagerank_out ORDER BY pagerank desc;
"""
        else:
            help_string = """
----------------------------------------------------------------------------
                                SUMMARY
----------------------------------------------------------------------------
Given a directed graph, pagerank algorithm finds the PageRank score of all
the vertices in the graph.
--
For an overview on usage, run:
SELECT {schema_madlib}.pagerank('usage');

For some examples, run:
SELECT {schema_madlib}.pagerank('example')
--
"""

    return help_string.format(schema_madlib=schema_madlib)
# ---------------------------------------------------------------------
